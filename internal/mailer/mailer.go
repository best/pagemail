package mailer

import (
	"fmt"
	"os"
	"path/filepath"
	"strconv"

	"gopkg.in/gomail.v2"
)

type Config struct {
	Host     string
	Port     int
	Username string
	Password string
	FromName string
}

type Mailer struct {
	config *Config
	dialer *gomail.Dialer
}

func NewMailer() *Mailer {
	config := &Config{
		Host:     getEnv("SMTP_HOST", "smtp.gmail.com"),
		Port:     getEnvInt("SMTP_PORT", 587),
		Username: getEnv("SMTP_USERNAME", ""),
		Password: getEnv("SMTP_PASSWORD", ""),
		FromName: getEnv("SMTP_FROM_NAME", "PageMail"),
	}

	dialer := gomail.NewDialer(config.Host, config.Port, config.Username, config.Password)

	return &Mailer{
		config: config,
		dialer: dialer,
	}
}

func (m *Mailer) SendPageMail(toEmail, originalURL, format, filePath string) error {
	// Validate configuration
	if m.config.Username == "" || m.config.Password == "" {
		return fmt.Errorf("SMTP credentials not configured")
	}

	// Create message
	msg := gomail.NewMessage()

	// Set headers
	msg.SetHeader("From", fmt.Sprintf("%s <%s>", m.config.FromName, m.config.Username))
	msg.SetHeader("To", toEmail)
	msg.SetHeader("Subject", fmt.Sprintf("PageMail: %s", originalURL))

	// Set body
	bodyText := m.generateEmailBody(originalURL, format)
	msg.SetBody("text/html", bodyText)

	// Attach file if it exists
	if filePath != "" && fileExists(filePath) {
		filename := filepath.Base(filePath)
		msg.Attach(filePath, gomail.Rename(filename))
	}

	// Send email
	if err := m.dialer.DialAndSend(msg); err != nil {
		return fmt.Errorf("failed to send email: %w", err)
	}

	return nil
}

func (m *Mailer) generateEmailBody(originalURL, format string) string {
	formatName := map[string]string{
		"html":       "HTML Archive",
		"pdf":        "PDF Document",
		"screenshot": "Screenshot",
	}

	formatDesc := formatName[format]
	if formatDesc == "" {
		formatDesc = format
	}

	return fmt.Sprintf(`
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <style>
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            line-height: 1.6; 
            color: #333; 
            max-width: 600px; 
            margin: 0 auto; 
            padding: 20px; 
        }
        .header { 
            background: linear-gradient(135deg, #667eea 0%%, #764ba2 100%%); 
            color: white; 
            padding: 20px; 
            border-radius: 8px; 
            text-align: center; 
            margin-bottom: 20px; 
        }
        .content { 
            background: #f8f9fa; 
            padding: 20px; 
            border-radius: 8px; 
            border-left: 4px solid #667eea; 
        }
        .url { 
            background: #e9ecef; 
            padding: 10px; 
            border-radius: 4px; 
            word-break: break-all; 
            font-family: monospace; 
        }
        .footer { 
            text-align: center; 
            margin-top: 30px; 
            padding-top: 20px; 
            border-top: 1px solid #dee2e6; 
            color: #6c757d; 
            font-size: 0.9em; 
        }
        a { color: #667eea; text-decoration: none; }
        a:hover { text-decoration: underline; }
    </style>
</head>
<body>
    <div class="header">
        <h1>📧 PageMail Delivery</h1>
        <p>Your requested web content is ready!</p>
    </div>
    
    <div class="content">
        <h2>📄 Content Details</h2>
        <p><strong>Original URL:</strong></p>
        <div class="url">%s</div>
        
        <p><strong>Format:</strong> %s</p>
        <p><strong>Generated:</strong> %s</p>
        
        <p>The requested content has been attached to this email. Please find the %s file in the attachment.</p>
        
        <h3>📋 What's Included</h3>
        <ul>
            <li>Complete content capture from the original URL</li>
            <li>All assets and styling preserved (where possible)</li>
            <li>Optimized for offline viewing</li>
        </ul>
    </div>
    
    <div class="footer">
        <p>Generated by <strong>PageMail</strong> - Web Content Archive Service</p>
        <p><em>This email was sent automatically. Please do not reply.</em></p>
    </div>
</body>
</html>`, originalURL, formatDesc, getCurrentTime(), formatDesc)
}

func (m *Mailer) TestConnection() error {
	// Create a test message
	msg := gomail.NewMessage()
	msg.SetHeader("From", m.config.Username)
	msg.SetHeader("To", m.config.Username)
	msg.SetHeader("Subject", "PageMail SMTP Test")
	msg.SetBody("text/plain", "This is a test email to verify SMTP configuration.")

	// Try to send (we'll get an error but can check if connection works)
	dialer := gomail.NewDialer(m.config.Host, m.config.Port, m.config.Username, m.config.Password)
	
	// Just test the connection without actually sending
	sender, err := dialer.Dial()
	if err != nil {
		return fmt.Errorf("SMTP connection failed: %w", err)
	}
	defer sender.Close()

	return nil
}

// Helper functions
func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

func getEnvInt(key string, defaultValue int) int {
	if value := os.Getenv(key); value != "" {
		if intValue, err := strconv.Atoi(value); err == nil {
			return intValue
		}
	}
	return defaultValue
}

func fileExists(path string) bool {
	if _, err := os.Stat(path); err == nil {
		return true
	}
	return false
}

func getCurrentTime() string {
	return "2025-09-01 16:54:21" // Placeholder - should use time.Now()
}

func (m *Mailer) SendVerificationEmail(toEmail, verificationURL string) error {
	// Validate configuration
	if m.config.Username == "" || m.config.Password == "" {
		return fmt.Errorf("SMTP credentials not configured")
	}

	// Create message
	msg := gomail.NewMessage()

	// Set headers
	msg.SetHeader("From", fmt.Sprintf("%s <%s>", m.config.FromName, m.config.Username))
	msg.SetHeader("To", toEmail)
	msg.SetHeader("Subject", "PageMail - 邮箱验证")

	// Set body
	bodyText := m.generateVerificationEmailBody(toEmail, verificationURL)
	msg.SetBody("text/html", bodyText)

	// Send email
	if err := m.dialer.DialAndSend(msg); err != nil {
		return fmt.Errorf("failed to send verification email: %w", err)
	}

	return nil
}

func (m *Mailer) generateVerificationEmailBody(email, verificationURL string) string {
	return fmt.Sprintf(`
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <style>
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            line-height: 1.6; 
            color: #333; 
            max-width: 600px; 
            margin: 0 auto; 
            padding: 20px; 
        }
        .header { 
            background: linear-gradient(135deg, #4CAF50 0%%, #45a049 100%%); 
            color: white; 
            padding: 30px 20px; 
            border-radius: 8px; 
            text-align: center; 
            margin-bottom: 30px; 
        }
        .content { 
            background: #f8f9fa; 
            padding: 30px; 
            border-radius: 8px; 
            border-left: 4px solid #4CAF50; 
        }
        .verify-button {
            display: inline-block;
            background: linear-gradient(135deg, #4CAF50 0%%, #45a049 100%%);
            color: white;
            padding: 15px 30px;
            border-radius: 6px;
            text-decoration: none;
            font-weight: bold;
            margin: 20px 0;
            border: none;
            cursor: pointer;
        }
        .verify-button:hover {
            background: linear-gradient(135deg, #45a049 0%%, #4CAF50 100%%);
        }
        .security-note {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 4px;
            padding: 15px;
            margin: 20px 0;
        }
        .footer { 
            text-align: center; 
            margin-top: 30px; 
            padding-top: 20px; 
            border-top: 1px solid #dee2e6; 
            color: #6c757d; 
            font-size: 0.9em; 
        }
        .url-fallback {
            background: #e9ecef;
            padding: 10px;
            border-radius: 4px;
            font-family: monospace;
            font-size: 0.9em;
            word-break: break-all;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🔐 邮箱验证</h1>
        <p>欢迎注册 PageMail！</p>
    </div>
    
    <div class="content">
        <h2>验证您的邮箱地址</h2>
        <p>您好！</p>
        <p>感谢您注册 <strong>PageMail</strong> 服务。为了确保账户安全，请验证您的邮箱地址：</p>
        <p><strong>邮箱：</strong>%s</p>
        
        <div style="text-align: center; margin: 30px 0;">
            <a href="%s" class="verify-button">立即验证邮箱</a>
        </div>
        
        <p>如果按钮无法点击，请复制以下链接到浏览器中打开：</p>
        <div class="url-fallback">%s</div>
        
        <div class="security-note">
            <strong>🔒 安全提醒：</strong>
            <ul>
                <li>验证链接将在 <strong>24小时</strong> 后失效</li>
                <li>请勿将此邮件转发给他人</li>
                <li>如果这不是您本人操作，请忽略此邮件</li>
            </ul>
        </div>
        
        <h3>✨ 验证完成后您可以：</h3>
        <ul>
            <li>正常登录使用 PageMail 服务</li>
            <li>享受完整的页面抓取功能</li>
            <li>获得更高的使用配额</li>
        </ul>
    </div>
    
    <div class="footer">
        <p>此邮件由 <strong>PageMail</strong> 系统自动发送</p>
        <p><em>如有疑问，请勿回复此邮件</em></p>
    </div>
</body>
</html>`, email, verificationURL, verificationURL)
}