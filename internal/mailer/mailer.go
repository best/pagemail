package mailer

import (
	"fmt"
	"os"
	"path/filepath"
	"strconv"

	"gopkg.in/gomail.v2"
)

type Config struct {
	Host     string
	Port     int
	Username string
	Password string
	FromName string
}

type Mailer struct {
	config *Config
	dialer *gomail.Dialer
}

func NewMailer() *Mailer {
	config := &Config{
		Host:     getEnv("SMTP_HOST", "smtp.gmail.com"),
		Port:     getEnvInt("SMTP_PORT", 587),
		Username: getEnv("SMTP_USERNAME", ""),
		Password: getEnv("SMTP_PASSWORD", ""),
		FromName: getEnv("SMTP_FROM_NAME", "PageMail"),
	}

	dialer := gomail.NewDialer(config.Host, config.Port, config.Username, config.Password)

	return &Mailer{
		config: config,
		dialer: dialer,
	}
}

func (m *Mailer) SendPageMail(toEmail, originalURL, format, filePath string) error {
	// Validate configuration
	if m.config.Username == "" || m.config.Password == "" {
		return fmt.Errorf("SMTP credentials not configured")
	}

	// Create message
	msg := gomail.NewMessage()

	// Set headers
	msg.SetHeader("From", fmt.Sprintf("%s <%s>", m.config.FromName, m.config.Username))
	msg.SetHeader("To", toEmail)
	msg.SetHeader("Subject", fmt.Sprintf("PageMail: %s", originalURL))

	// Set body
	bodyText := m.generateEmailBody(originalURL, format)
	msg.SetBody("text/html", bodyText)

	// Attach file if it exists
	if filePath != "" && fileExists(filePath) {
		filename := filepath.Base(filePath)
		msg.Attach(filePath, gomail.Rename(filename))
	}

	// Send email
	if err := m.dialer.DialAndSend(msg); err != nil {
		return fmt.Errorf("failed to send email: %w", err)
	}

	return nil
}

func (m *Mailer) generateEmailBody(originalURL, format string) string {
	formatName := map[string]string{
		"html":       "HTML Archive",
		"pdf":        "PDF Document",
		"screenshot": "Screenshot",
	}

	formatDesc := formatName[format]
	if formatDesc == "" {
		formatDesc = format
	}

	return fmt.Sprintf(`
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <style>
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            line-height: 1.6; 
            color: #333; 
            max-width: 600px; 
            margin: 0 auto; 
            padding: 20px; 
        }
        .header { 
            background: linear-gradient(135deg, #667eea 0%%, #764ba2 100%%); 
            color: white; 
            padding: 20px; 
            border-radius: 8px; 
            text-align: center; 
            margin-bottom: 20px; 
        }
        .content { 
            background: #f8f9fa; 
            padding: 20px; 
            border-radius: 8px; 
            border-left: 4px solid #667eea; 
        }
        .url { 
            background: #e9ecef; 
            padding: 10px; 
            border-radius: 4px; 
            word-break: break-all; 
            font-family: monospace; 
        }
        .footer { 
            text-align: center; 
            margin-top: 30px; 
            padding-top: 20px; 
            border-top: 1px solid #dee2e6; 
            color: #6c757d; 
            font-size: 0.9em; 
        }
        a { color: #667eea; text-decoration: none; }
        a:hover { text-decoration: underline; }
    </style>
</head>
<body>
    <div class="header">
        <h1>ðŸ“§ PageMail Delivery</h1>
        <p>Your requested web content is ready!</p>
    </div>
    
    <div class="content">
        <h2>ðŸ“„ Content Details</h2>
        <p><strong>Original URL:</strong></p>
        <div class="url">%s</div>
        
        <p><strong>Format:</strong> %s</p>
        <p><strong>Generated:</strong> %s</p>
        
        <p>The requested content has been attached to this email. Please find the %s file in the attachment.</p>
        
        <h3>ðŸ“‹ What's Included</h3>
        <ul>
            <li>Complete content capture from the original URL</li>
            <li>All assets and styling preserved (where possible)</li>
            <li>Optimized for offline viewing</li>
        </ul>
    </div>
    
    <div class="footer">
        <p>Generated by <strong>PageMail</strong> - Web Content Archive Service</p>
        <p><em>This email was sent automatically. Please do not reply.</em></p>
    </div>
</body>
</html>`, originalURL, formatDesc, getCurrentTime(), formatDesc)
}

func (m *Mailer) TestConnection() error {
	// Create a test message
	msg := gomail.NewMessage()
	msg.SetHeader("From", m.config.Username)
	msg.SetHeader("To", m.config.Username)
	msg.SetHeader("Subject", "PageMail SMTP Test")
	msg.SetBody("text/plain", "This is a test email to verify SMTP configuration.")

	// Try to send (we'll get an error but can check if connection works)
	dialer := gomail.NewDialer(m.config.Host, m.config.Port, m.config.Username, m.config.Password)
	
	// Just test the connection without actually sending
	sender, err := dialer.Dial()
	if err != nil {
		return fmt.Errorf("SMTP connection failed: %w", err)
	}
	defer sender.Close()

	return nil
}

// Helper functions
func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

func getEnvInt(key string, defaultValue int) int {
	if value := os.Getenv(key); value != "" {
		if intValue, err := strconv.Atoi(value); err == nil {
			return intValue
		}
	}
	return defaultValue
}

func fileExists(path string) bool {
	if _, err := os.Stat(path); err == nil {
		return true
	}
	return false
}

func getCurrentTime() string {
	return "2025-09-01 16:54:21" // Placeholder - should use time.Now()
}